/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package guis;

import entidades.Publicacion;
import events.EventoActualizarUsuario;
import events.EventoCerrarSesion;
import events.EventoConsultarPublicaciones;
import events.EventoEliminarPublicacion;
import events.EventoConsultarPublicacionesHashtag;
import events.EventoRegistrarPublicacion;
import interfaces.IFachadaConexion;
import java.util.List;
import javax.swing.JOptionPane;
import logica.Context;
import logica.FachadaConexion;
import logica.MuroState;
import observers.ObserverActualizarUsuario;
import observers.ObserverCerrarSesion;
import observers.ObserverConsultarPublicaciones;
import observers.ObserverEliminarPublicacion;
import observers.ObserverConsultarPublicacionesHashtag;
import observers.ObserverRegistrarPublicacion;
import peticiones.PeticionPublicacion;
import peticiones.PeticionPublicaciones;
import peticiones.PeticionUsuario;


public class FrmMuro extends javax.swing.JFrame implements ObserverRegistrarPublicacion, ObserverConsultarPublicaciones, ObserverActualizarUsuario, ObserverConsultarPublicacionesHashtag, ObserverEliminarPublicacion, ObserverCerrarSesion{
    private IFachadaConexion fachadaConexion;
    private static FrmMuro instance;
    /**
     * Creates new form FrmMuro
     */
    public FrmMuro() {
        initComponents();
        this.fachadaConexion = new FachadaConexion();
        EventoRegistrarPublicacion.getInstance().addObserver(this);
        EventoConsultarPublicaciones.getInstance().addObserver(this);
        EventoActualizarUsuario.getInstance().addObserver(this);
        EventoEliminarPublicacion.getInstance().addObserver(this);
        EventoConsultarPublicacionesHashtag.getInstance().addObserver(this);
        EventoCerrarSesion.getInstance().addObserver(this);
        revalidate();
        consultarPublicaciones();
    }
    
    public static FrmMuro getInstance(){
        if(instance == null)instance = new FrmMuro();
        return instance;
    }

    private void mostrarPublicacion(PeticionPublicacion peticion) {
        //JOptionPane.showMessageDialog(this, peticion.getPublicacion().getTexto().trim(), "Publicacion Nueva", JOptionPane.INFORMATION_MESSAGE);
        panMuro.agregarPublicacion(peticion.getPublicacion());
    }
    
    private void consultarPublicaciones(){
        fachadaConexion.consultarPublicaciones();
    }
    
    private void pintarMuro(List<Publicacion> publicaciones){
        panMuro.init(publicaciones);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panMuro = new guis.PMuro();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Faceboot");
        setBackground(new java.awt.Color(255, 255, 255));
        setResizable(false);

        javax.swing.GroupLayout panMuroLayout = new javax.swing.GroupLayout(panMuro);
        panMuro.setLayout(panMuroLayout);
        panMuroLayout.setHorizontalGroup(
            panMuroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 830, Short.MAX_VALUE)
        );
        panMuroLayout.setVerticalGroup(
            panMuroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 638, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panMuro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panMuro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private guis.PMuro panMuro;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update(PeticionPublicacion peticion) {
        if(MuroState.getInstance().getState().equals(MuroState.IN_HASHTAG)){
            return;
        }
        mostrarPublicacion(peticion);
    }

    @Override
    public void update(PeticionPublicaciones peticion) {
        MuroState.getInstance().setStateALL();
        pintarMuro(peticion.getPublicaciones());
    }
    
    

    @Override
    public void update(PeticionUsuario peticion) {
        if(peticion.getUsuario() == null){
            JOptionPane.showMessageDialog(this, "No se pudo actualizar el usuario", "Actualizar usuario",JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        Context.getInstance().setUsuario(peticion.getUsuario());
        consultarPublicaciones();
    }

    @Override
    public void updateEliminarPublicacion(PeticionPublicacion peticion) {
        this.consultarPublicaciones();
    }
    
    @Override
    public void updatePublicacionesTag(PeticionPublicaciones peticion) {
        MuroState.getInstance().setStateIN_HASHTAG();
        pintarMuro(peticion.getPublicaciones());
    }

    @Override
    public void updateLogout(PeticionUsuario peticion) {
        FrmInicioSesion.getInstance().setVisible(true);
        this.dispose();
    }
}
